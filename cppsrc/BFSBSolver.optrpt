Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: BFSBSolver::findNearest(const BFSBSolver *, double, double) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BFSBSolver::findNearest(const BFSBSolver *, double, double) const) [1] BFSBSolver.cpp(17,68)
  -> INLINE: (18,13) std::__1::__wrap_iter<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::const_pointer>::operator*(const std::__1::__wrap_iter<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::const_pointer> *) const noexcept
  -> INLINE: (18,38) std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::cbegin(const std::__1::vector<SBLoc, std::__1::allocator<SBLoc>> *) const noexcept
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,38) std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>>::operator->(const std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> *) const noexcept
  -> INLINE: (18,57) std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::cend(const std::__1::vector<SBLoc, std::__1::allocator<SBLoc>> *) const noexcept
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (18,57) std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>>::operator->(const std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> *) const noexcept
  -> INLINE: (19,31) std::__1::min_element<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::const_iterator, struct lambda [] type at line 118245, col. 31>(std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::const_iterator, std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>::const_iterator, struct lambda [] type at line 118245, col. 31)
    -> INLINE: /Library/Developer/CommandLineTools/usr/include/c++/v1/algorithm:(2624,23) lambda [] type at line 118245, col. 31::operator()(const struct lambda [] type at line 118245, col. 31 *, const SBLoc &, const SBLoc &)->bool
      -> INLINE: BFSBSolver.cpp:(20,42) SBLoc::havDist(double, double, double, double)
      -> INLINE: BFSBSolver.cpp:(21,37) SBLoc::havDist(double, double, double, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /Library/Developer/CommandLineTools/usr/include/c++/v1/algorithm(2623,9) inlined into BFSBSolver.cpp(19,31)
<Peeled>
   remark #25084: Preprocess Loopnests: Moving Out Store    [ /Library/Developer/CommandLineTools/usr/include/c++/v1/iterator(1371,11) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between __first.__first (77:24) and __first.__first (2625:27)
LOOP END

    Report from: Code generation optimizations [cg]

BFSBSolver.cpp(17,68):remark #34051: REGISTER ALLOCATION : [__ZNK10BFSBSolver11findNearestEdd] BFSBSolver.cpp:17

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rbx rbp rdi r12-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      88
            Global    :      35
            Local     :      53
        Regenerable   :       3
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      14 [3.30e+01 ~ 14.8%]
            Writes    :      11 [2.04e+01 ~ 9.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BFSBSolver::build(BFSBSolver *, const std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BFSBSolver::build(BFSBSolver *, const std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> &)) [2] BFSBSolver.cpp(13,76)
  -> INLINE: (14,19) std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>>::operator=(std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> *, const std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> &) noexcept
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

BFSBSolver.cpp(13,76):remark #34051: REGISTER ALLOCATION : [__ZN10BFSBSolver5buildERKNSt3__110shared_ptrINS0_6vectorI5SBLocNS0_9allocatorIS3_EEEEEE] BFSBSolver.cpp:13

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r13]
        
    Routine temporaries
        Total         :      24
            Global    :      12
            Local     :      12
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BFSBSolver::printSolverInfo(const BFSBSolver *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BFSBSolver::printSolverInfo(const BFSBSolver *) const) [3] BFSBSolver.cpp(24,42)
  -> INLINE: (25,15) std::__1::operator<<<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>> &, const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/Library/Developer/CommandLineTools/usr/include/c++/v1/memory(2089,77):remark #34000: call to _memset implemented inline with stores with proven (alignment, offset): (16, 0)
BFSBSolver.cpp(24,42):remark #34051: REGISTER ALLOCATION : [__ZNK10BFSBSolver15printSolverInfoEv] BFSBSolver.cpp:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     117
            Global    :      34
            Local     :      83
        Regenerable   :      24
        Spilled       :       8
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       5 [1.04e+00 ~ 2.8%]
            Writes    :       7 [4.08e-02 ~ 0.1%]
        Spills        :      16 bytes*
            Reads     :       3 [5.40e-02 ~ 0.1%]
            Writes    :       2 [2.20e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BFSBSolver::~BFSBSolver(BFSBSolver *) noexcept

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BFSBSolver::~BFSBSolver(BFSBSolver *) noexcept) [5] BFSBSolver.hpp(24,27)
  -> INLINE: (24,28) std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>>::~shared_ptr(std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> *) noexcept
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

BFSBSolver.hpp(24,27):remark #34051: REGISTER ALLOCATION : [__ZN10BFSBSolverD1Ev] BFSBSolver.hpp:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rdi r15]
        
    Routine temporaries
        Total         :      19
            Global    :       9
            Local     :      10
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BFSBSolver::~BFSBSolver(BFSBSolver *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BFSBSolver::~BFSBSolver(BFSBSolver *const)) [6] BFSBSolver.hpp(24,13)
  -> INLINE: (24,13) BFSBSolver::~BFSBSolver(BFSBSolver *) noexcept
    -> INLINE: (24,28) std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>>::~shared_ptr(std::__1::shared_ptr<std::__1::vector<SBLoc, std::__1::allocator<SBLoc>>> *) noexcept
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

BFSBSolver.hpp(24,13):remark #34051: REGISTER ALLOCATION : [__ZN10BFSBSolverD0Ev] BFSBSolver.hpp:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rbp rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      10
            Local     :      10
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: lambda [] type at line 118245, col. 31::operator()(const struct lambda [] type at line 118245, col. 31 *, const SBLoc &, const SBLoc &)->bool

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (lambda [] type at line 118245, col. 31::operator()(const struct lambda [] type at line 118245, col. 31 *, const SBLoc &, const SBLoc &)->bool) BFSBSolver.cpp(19,69)

===========================================================================

Begin optimization report for: SBLoc::havDist(double, double, double, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SBLoc::havDist(double, double, double, double)) SBLoc.hpp(76,82)

===========================================================================
